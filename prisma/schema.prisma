// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum View {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum Allow {
  COMMENT
  DUET
  STITCH
}

model Profile {
  id           String  @id @unique @default(cuid())
  bio          String?
  facebookUrl  String?
  twitterUrl   String?
  instagramUrl String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Like {
  id String @id @unique @default(cuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Share {
  id String @id @unique @default(cuid())

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Comment {
  id      String @id @unique @default(cuid())
  content String

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model User {
  id         String   @id @unique @default(cuid())
  email      String   @unique
  firstName  String
  lastName   String
  password   String
  isVerified Boolean  @default(false)
  role       Role     @default(USER)
  posts      Post[]
  profile    Profile?

  followerId String? @unique
  follower   User?   @relation("FollowerRelation", fields: [followerId], references: [id])
  followers  User[]  @relation("FollowerRelation")

  followingId String?   @unique
  following   User?     @relation("FollowingRelation", fields: [followingId], references: [id])
  followings  User[]    @relation("FollowingRelation")
  Comment     Comment[]
  Like        Like[]
  Share       Share[]
}

model Post {
  id      String @id @unique @default(cuid())
  caption String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  video   Video?
  videoId String @unique

  viewAs View
  allow  Allow[]

  likes    Like[]
  shares   Share[]
  comments Comment[]
}

model Video {
  id           String @id @unique @default(cuid())
  thumbnailUrl String

  videoUrl String

  musicId String @unique
  music   Music  @relation(fields: [musicId], references: [id])

  postId String? @unique
  post   Post?   @relation(fields: [postId], references: [id])
}

model Music {
  id     String @id @unique @default(cuid())
  name   String
  artist String

  url String

  video Video[]
}
